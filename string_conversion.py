import base64


def decode_base64_string(string):
    # Check if the given string is Base64 encoded or not
    try:
        # print("encoded string")
        decoded_bytes = base64.b64decode(string)
        decoded_string = decoded_bytes.decode('utf-8')
        return decoded_string
    except:
        # print("simple string")
        return string

# Example usage:
# encoded_string = 'R29vZ2xlICANCjxodHRwczovL3d3dy5nb29nbGUuY29tL2FwcHNlcnZlL21rdC9wL0FELUZuRXlWVzI0dGY0aUtCSGZwSzdSS0o3N3hOTVB0d2d4alVvZUxSRjR6QkJmWmtyRUpqNWJsRllyZVBDWm1KWFQzZEtzU1MxZHJvSDZYNjV0bldjcXQ4R2hRdk1fNXd3ZnVnVDd4Vi1zY0VGT3hwOEVuMS1xekw4Q2xsR1RaY1dKRGY5YkVFZ2N0ai1BMEdiSUFMOWtnRjQ0QVhjWlNaU2M4cmVLaS1RPg0KDQpiYW5uZXINCg0KSGkgUHJhbmF2LA0KDQpXZWxjb21lIHRvIEdvb2dsZS4gWW91ciBuZXcgYWNjb3VudCBjb21lcyB3aXRoIGFjY2VzcyB0byBHb29nbGUgcHJvZHVjdHMsICANCmFwcHMsIGFuZCBzZXJ2aWNlcy4NCg0KSGVyZSBhcmUgYSBmZXcgdGlwcyB0byBnZXQgeW91IHN0YXJ0ZWQuDQoNCkdvb2dsZSBHbw0KDQpHZXQgYSBsaWdodGVyLCBmYXN0ZXIgd2F5IHRvIHNlYXJjaA0KDQpTZWFyY2ggaW4gYSBmYXN0LCBmdW4sIGFuZCBlYXN5IHdheS4gVHlwZSBsZXNzIGFuZCBzYXZlIHRpbWUgYnkgdXNpbmcgeW91ciAgDQp2b2ljZS4NCg0KR2V0IEdvb2dsZSBHbyAgDQo8aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hcHBzZXJ2ZS9ta3QvcC9BRC1GbkV5eEpKYkVBRnF4b1JaRzRPUDNmVktkOEFYckV2dG1tb2tNZTh2WTNzSV9keWhzbl9tbWk5bzIxZ0lyZUw1ME1SdnM1MWpueFZMdU1iZ1BOb0Q5emE4VkV5bUhJYXNKYUgxM0c5alVwS0Z3dmFkTEo1aVBOckVQYkhERUdzeWxhazlRVFhDWmVlMnAwMnMwOXBienFNOFRaN00yU2d6dklPTmRnOTJNblFjNUtVV0pqX1lvSm82NFNLZy01LWVrQUItUm5qTk55VmtjWHNWMTJCLTVXcFpZSnMxaXp0YUNFSWpFNjI3a0dtNEFCUG1QQjJVNDY5ZlFnb1BYOXZsRllhX1djMk02QjZvTDA1ZXR2TEJoTFFZY1NiN09DeEJFckRQdGJaLW00amVHPg0KDQpncmlkDQoNCk1vcmUgZnJvbSBHb29nbGUNCg0KRGlzY292ZXIgdGhlIGxhdGVzdCBhcHBzIGZyb20gR29vZ2xlDQoNCk1vcmUgYXBwcyBmcm9tIEdvb2dsZSAgDQo8aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hcHBzZXJ2ZS9ta3QvcC9BRC1GbkV3LVlwRENfWUZOeFNqLVc5aGZ3aVROby03enpsVGcwWW9tUXhWcFNTZkRPUzBVMlhRX1lITDhrWG9XV0V1dllPM1d6SDlZMTVaQmo4TUp0VkZSZlpkazN3UjdNU09JdUtSUE9GR0NfREYwTG1aWVdvX2sxY1NibHo3OG1WaU13VHdwYkVqSjhsOTRVYVNuM0s5aUlaS0xvUjB3c1J0REVpTkJfMWoyTWR0a3BReHNBVDVZakh4cU5PZDJ1cjlXNW9abDUwdW9oVlMtWGlMSTdDWExMQWo1bTFRaDhZVmFTOVJyNmU4bDliZ3ZjUDY5Y3lOWXVCZGczcWJMVTdMRFJIRm1uaGlwa015NFhzQXo3UDliMzF5bDJFMGthOG93em1JWFV1d2k0SEY3OHc0MGJmVjVPVGhJQ0NIYnpmbGdwYThleS1hczFINVJlUTNwZ0JmS2JkdHJGUTlVNUt2RGNiNmlvWEtSWmZHXzhTU0JsM2R5UVdPMnJ3dndjazZrT0IyMEZOQk9NOURZSllpdUx0Ym0zRHdESW54NFhzcWNBb3hhSzFVMmFzbUYxVG9xU2d2TTNJeGRibEp1RHQwcXdhcGc5a1Q5c1VwRGw4SW8tajQ4eVBxNmF6d2Nya2UxLUJyb3lQNmYwSHJyMXQ4bUR0VXJxb2p5YlVROXRIeTEtcjhWZThnZjZ1cnZRWTNEYUtyQnBnY21UbkE2VUxSbTJhZ3Jrd2tlQ2R4aW51ZFNPaVhMNjdUaGxhZjluRTd6Vi1BYU5CRmxHOENJZWRfRFhkeDgzaFk1cGJidlBrYUY4d0hmT3Y2M0FYdzIwWnNFTnlaOWVzQjBpTWtCYWlHME5iaUFPWGNsb29sVjgzNTdCM0l6Mlo3ZlpmMFRwTVF0NFh0QVpVdlNMX2FhRWJpMHExZGx0NzhkYWNQOEJLd2dQOW9xVVp0ak9PR1NSbk95amJaOGotWElVUlZjTlAtYmZxeFFWQ1c1VGpaVWNXRU94MHRjT2x6a0lOdllMb013dUdRR3lUN3FaYWZIWGxLcnZjQ1dldjNpYkdwX1RwYz4NCg0KU2VjdXJpdHkNCg0KQ29udHJvbCB5b3VyIGFjY291bnQNCg0KQ2hvb3NlIHdoYXQncyByaWdodCBmb3IgeW91LiBSZXZpZXcgYW5kIGFkanVzdCB5b3VyIHByaXZhY3kgYW5kIHNlY3VyaXR5ICANCnNldHRpbmdzIGFueSB0aW1lLg0KDQpNeSBBY2NvdW50ICANCjxodHRwczovL3d3dy5nb29nbGUuY29tL2FwcHNlcnZlL21rdC9wL0FELUZuRXhPQnVlaVBYcVphMDJWejdjM1l0MUk5ck8yS081TFc1bGZMcDdwQ05DVERBYmE4WS15cWpZZV94b3k5VHFhV3Q1bUVrb3FGQzBMaWd5M3lUTWZFSlJONFJWRE0ySWhJdnBsQUZ3OWVSQWU1Rmg0MzBMazlhWUNvRkVJX2paRmVlalhDRkZVT0R6Wm1JZVozY0lpWnBwVzRJMWJKRFB0bi1XNVhXQTEyTkY3eGxFSkV3WTBFei14Q1FwU3BaVVVyRUt2M0ZrM1Nra1dsd00+DQoNCkZpbmQgTXkgRGV2aWNlDQoNCkZpbmQgeW91ciBwaG9uZQ0KDQpQaW5wb2ludCB5b3VyIHBob25lJ3MgIA0KbG9jYXRpb248aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hcHBzZXJ2ZS9ta3QvcC9BRC1GbkV3dWstOTFwVS1BMlg2ekFPT0YtMElXWXJtZ2U4dDMyTHdPNFY1bTRZaXluYkNuWktMMjBBRmFYR0dGdk1hU2ZHR2VqNWhLaG5JeG1HLVY2SW1FUVZJS1Y2RU83Ri01REJvZ3FQMG5JSkQtT01yMU10NEEyREVUZ1prZlk5VmRMaGdZZ0RGLUlWQUFyMmktZU0zUFpYVnNia3VyenBteDZ0NG5CN3ppWV94WXlqZ1F2RmxWNGRnYy1OVDZ4N2xodnc5bmtRPiAgDQphbmQgc2VjdXJlIGl0IHdpdGggRmluZCBNeSBEZXZpY2UuDQoNCkZpbmQgQW5zd2Vycw0KDQpGaW5kIGFuc3dlcnMNCg0KVmlzaXQgdGhlIEhlbHAgIA0KQ2VudGVyPGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYXBwc2VydmUvbWt0L3AvQUQtRm5FeEhrMTBUZ3hQaUQ5UWM0X3lhM1dlVm5TRGdkZlhSYjVUQ2h2WC1idk51aWdOQm9FSlFTclN4TDhuaWZCa0NrRlMtNS16U0xYZGFERXdHV0poZmJRSzNpRGc0U245bmFHQS1mV0YxclZrR2tWRTBXUE9uR0NwSF9fbVRNVVgwNWlXTWZEZVF6VEtaRERsRVNRTE1Rc1FHX3o2RUFubHRNMVBFdTJIRnB4cUhmQzlSbFpDZ05xX1BGNF9lWE4zNU83MHE4UT4gIA0KdG8gbGVhcm4gYWxsIGFib3V0IHlvdXIgbmV3IEdvb2dsZSBBY2NvdW50Lg0KDQpHb29nbGUgTG9nbw0KDQpSZXBsaWVzIHRvIHRoaXMgZW1haWwgYXJlbid0IG1vbml0b3JlZC4gSWYgeW91IGhhdmUgYSBxdWVzdGlvbiBhYm91dCB5b3VyICANCm5ldyBhY2NvdW50LCB0aGUgSGVscCBDZW50ZXIgbGlrZWx5IGhhcyB0aGUgYW5zd2VyIHlvdSdyZSBsb29raW5nIGZvci4NCg0KDQoNCkdvb2dsZSBMTEMgMTYwMCBBbXBoaXRoZWF0cmUgUGFya3dheSwgTW91bnRhaW4gVmlldywgQ0EgOTQwNDMNClRoaXMgZW1haWwgd2FzIHNlbnQgdG8geW91IGJlY2F1c2UgeW91IGNyZWF0ZWQgYSBHb29nbGUgYWNjb3VudC4NCg=='
# encoded_string = 'The given string is not Base64 encoded.'
# decoded_string = decode_base64_string(encoded_string)
# print(decoded_string)
